package com.shibu;

import java.util.*;

public class FindMedianInStream {
    public static void main(String[] args) {
        List<Integer> a = new LinkedList<>();   //{12,4,5,3,8,7}
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        for(int i=0; i<size; i++){
            a.add(sc.nextInt());
        }
        System.out.println(runningMedian(a));
        //System.out.println(Double.valueOf((1+2)/2));
        //System.out.println((Double.valueOf(1) + Double.valueOf(2)) / 2.0);
    }
    static PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
    static PriorityQueue<Integer> minheap = new PriorityQueue<>();
    public static List<Double> runningMedian(List<Integer> a) {
        List<Double> ret = new LinkedList<>();
        for(int i = 0; i<a.size(); i++){
            insertItem(a.get(i));
            ret.add(findMedian());
        }
        return ret;


    }
    public static void insertItem(int a){
        if(maxheap.isEmpty() || maxheap.peek()>=a){
            maxheap.add(a);
        }
        else{
            minheap.add(a);
        }

        if(minheap.size()+1<maxheap.size()){
            minheap.add(maxheap.poll());
        }
        else if(minheap.size()>maxheap.size()){
            maxheap.add(minheap.poll());
        }

    }
    public static Double findMedian(){
        if(maxheap.size()==minheap.size()){
            return (Double.valueOf(maxheap.peek())+Double.valueOf(minheap.peek()))/2.0;
        }
        return Double.valueOf(maxheap.peek());

    }
}
