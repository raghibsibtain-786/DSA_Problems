class Solution {
    
    /*public boolean isPalindrome(String s, int start, int end){
      
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)){
                return false;
            }
        }
        return true;
        
    }
    public String longestPalindrome(String s) {
        
        if(s.length()==0) return "";
        int i = 0, j = s.length()-1;
        String maxSub = "";
        int minlen = Integer.MAX_VALUE;
        
        while(i<=j){
            if(isPalindrome(s,i,j)){
                if(minlen>)
                maxSub = s.substring(i,j+1);                
            }
            i++;
            j--;             
        }
        return maxSub==""?"":maxSub;
        
    }*/
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int maxLen = 1;
        int start = 0;
        for(int i = 0; i<n; i++){
            dp[i][i] = true;    
        }
        for(int i = 0; i<n-1; i++){
            if(s.charAt(i)==s.charAt(i+1)){
                dp[i][i+1] = true;
                maxLen = 2;
                start = i;
            }
                        
        }
        
        for(int k = 3; k<=n; k++){
            
            for(int i = 0; i<=n-k; i++){
                
                int j = i+k-1;    
                if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]){
                    dp[i][j] = true;
                    
                    if(k>maxLen){
                        maxLen = k;
                        start = i;
                    }
                    
                }
                
            }
        }
        return s.substring(start,start+maxLen);        
    }
}
