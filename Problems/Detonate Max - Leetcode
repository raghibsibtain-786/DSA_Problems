class Solution {
    public void dfs(int source, int[] vis, ArrayList<Integer>[] adj)
    {
        vis[source] = 1;
        for(int node : adj[source])
        {
            if(vis[node]==0)
            {
                dfs(node,vis,adj);
            }
        }
    }
    public int maximumDetonation(int[][] bombs) {
        if(bombs.length==0) return 0;
        
        ArrayList<Integer>[] adj = new ArrayList[bombs.length];  
        for(int i = 0; i<bombs.length; i++){
            adj[i] = new ArrayList<>();
        }
        for(int i = 0; i<bombs.length; i++){
            
            long x1 = bombs[i][0];
            long y1 = bombs[i][1];
            long r1 = bombs[i][2];
            
            for(int j = 0; j<bombs.length; j++)
            {
                if(i!=j)
                {
                    long x2 = bombs[j][0] ;
                    long y2 = bombs[j][1] ;
                    long dsq = (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);
                    
                    if(dsq<=r1*r1)
                    {
                        adj[i].add(j);
                    }
                }
            }
        }
        
        int maxN = Integer.MIN_VALUE;
        
        int[] vis = new int[adj.length];
        
        for(int i = 0; i<adj.length; i++)
        {
            
            Arrays.fill(vis,0);
            dfs(i,vis,adj);
            int count = 0;
            for(int j = 0; j<vis.length; j++){
                if(vis[j]==1)
                {
                    count++;
                }
            }
            maxN = Math.max(maxN,count);
        }
        return maxN;
        
    }
}
