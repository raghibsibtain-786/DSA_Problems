class Solution { //slow
    public int maxProduct(int[] nums) {
        
        if(nums.length==1)
            return nums[0];
        
        int ans = 0;
        int prod = 1;
        for(int i = 0 ; i< nums.length; i++){
            prod = nums[i];
            ans = Math.max(ans,prod);
            for(int j = i+1; j<nums.length; j++){
                prod *= nums[j];
                ans = Math.max(ans,prod);
            }
        }
        return ans;        
    }
}

class Solution { //fast
    public int maxProduct(int[] nums) {
        if(nums.length==1)
            return nums[0];
        
        int maxProduct = 0;
        int curr = 1;
        for(int i = 0; i<nums.length; i++){
            
            curr = curr * nums[i];
            maxProduct = Math.max(curr,maxProduct);
            
            if(curr == 0)
                curr = 1;
            
        }   
        curr = 1;
        
        for(int i = nums.length-1; i>=0; i--){
            
            curr = curr * nums[i];
            maxProduct = Math.max(curr,maxProduct);
            
            if(curr==0)
                curr = 1;
        }
        
        return maxProduct;
    }
}
