class Solution { // DFS
    public int[][] dp;
    public int dfs(int[] obstacles, int n, int index, int lane){
        while(index<n && obstacles[index]!=lane)
            index++;
        
        index--;
        
        if(index==n-1)
            return 0;
        
        int ans = Integer.MAX_VALUE;
        for(int obstacle: new int[]{1,2,3})
        {
            if(obstacles[index]!=obstacle && obstacles[index+1]!=obstacle) 
                //basically this obstacle is telling me 
                //how if it is same as obstacles[index]
                ans = Math.min(ans, (1+dfs(obstacles,n,index+1,obstacle)));
        }
        return ans;
    }
    public int minSideJumps(int[] obstacles) {
        
        int[][] dp = new int[obstacles.length][3];
        int n = obstacles.length;
        return dfs(obstacles,n,0,2);    
    }
}

class Solution { //BFS
    public int minSideJumps(int[] obstacles) 
    {
        Queue<int[]> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        
        q.add(new int[]{0,2}); //it starts at lane 2 and index 0 always
        set.add(0 + "+" + 2);
        
        int n = obstacles.length;
        int ans = 0;
        
        while(!q.isEmpty())
        {
            int s= q.size();
            while(s!=0)
            {
                int currPos = q.peek()[0];
                int currLane = q.peek()[1];
                q.poll();
            
                while(currPos<n  && obstacles[currPos]!=currLane)
                {
                    currPos++;                
                }
                currPos--;
                if(currPos==n-1)
                {
                    return ans;
                }
                for(int newLane: new int[]{1,2,3})
                {
                    if(obstacles[currPos]!=newLane && obstacles[currPos+1]!=newLane && !set.contains(currPos + "+" + newLane))
                    {
                        q.add(new int[]{currPos,newLane});
                        set.add(currPos+ "+" + newLane);
                    }
                }    
                s--;
            }
            ans++;
        }
        return ans;
    }
}
