class Solution {
       
  
    public int minimumOperations(int[] nums, int start, int goal) {
        
        int count = 0;
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[1001];
        q.add(start);
        
        while(!q.isEmpty())
        {   
            int s = q.size();
            while(s!=0){ //because we want count to increase after operation on all elements in 
                         //the array of size s
                
                int val = q.peek(); 
                q.poll();
                if(val==goal) 
                    return count;
                if(val<0 || val>1000) 
                    continue;
                
                if(!visited[val])
                {
                    visited[val] = true;
                    for(int i = 0; i<nums.length; i++)
                    {                    
                    
                        int a = val+nums[i];
                        int b = val-nums[i];
                        int c = val^nums[i];
                        q.add(a);
                        q.add(b);
                        q.add(c);
                    }
                }
                s--;
            }
            count++;
        }
        return -1;
    }
}
