class MinStack {
    Stack<Long> stk = new Stack<>();
    Long mini;
    
    public MinStack() {
                
        mini = Long.MAX_VALUE;
    }
    
    public void push(int val) {
        Long lval = Long.valueOf(val);
        if(stk.isEmpty())
        {
            mini = lval;
            stk.push(lval);
        }
        else
        {
            if(lval<mini)
            {
                stk.push((2*lval)-mini);
                mini = lval;
            }
            else
            {
                stk.push(lval);
            }
        }
    }
    
    public void pop() {
        if(stk.peek()<mini)
        {
            mini = ((2*mini)-stk.peek());
            stk.pop();
        }
        else
        {
            stk.pop();
        }
    }
    
    public int top() {
        if(stk.peek() < mini)
        {
            return mini.intValue();
        }
        else
        {
            return stk.peek().intValue();
        }
    }
    
    public int getMin() {
        return mini.intValue();    
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
