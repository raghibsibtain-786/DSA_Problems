class Solution {
    int[][] dp;
    public int help(int[][] matrix, int row, int col){
        if(dp[row][col]>0)
            return dp[row][col];
        
        int up = 0;
        if(row-1>=0 && matrix[row-1][col]>matrix[row][col]){
            up = help(matrix,row-1,col);
        }
        int down = 0;
        if(row+1<matrix.length && matrix[row+1][col]>matrix[row][col]){
            down = help(matrix,row+1,col);
        }
        int left = 0;
        if(col-1>=0 && matrix[row][col-1]>matrix[row][col]){
            left = help(matrix,row,col-1);
        }
        int right = 0;
        if(col+1<matrix[0].length && matrix[row][col+1]>matrix[row][col]){
            right = help(matrix,row,col+1);
        }
        return dp[row][col] = 1 + Math.max(Math.max(up,down),Math.max(left,right));
    }
    public int longestIncreasingPath(int[][] matrix) {
        dp = new int[matrix.length][matrix[0].length];
        int longest = 0;
        for(int i = 0; i<matrix.length; i++){
            for(int j = 0; j<matrix[0].length; j++){
                int tempMax = help(matrix,i,j);
                longest = Math.max(tempMax,longest);
            }
        }
        return longest;
    }
}
