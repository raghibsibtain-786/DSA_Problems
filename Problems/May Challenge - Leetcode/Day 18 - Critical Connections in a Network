class Solution {
    int distance = 0;
    
    public void dfsHelp(List<Integer>[] adj, boolean[] visited, int[] dist, 
                        int curr, int parent, List<List<Integer>> ans)
    {
        visited[curr] = true;
        dist[curr] = distance++;
        int currDistance = dist[curr];
        
        for(int node: adj[curr]){
            if(node==parent)
                continue;
            
            if(!visited[node]){
                dfsHelp(adj,visited,dist,node,curr,ans);
            }
            dist[curr] = Math.min(dist[curr],dist[node]);
            if(currDistance<dist[node]){
                ans.add(Arrays.asList(node,curr));
            }
        }
    }
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) { 
        List<Integer>[] adj = new ArrayList[n];
        for(int i = 0; i<n; i++){
            adj[i] = new ArrayList<>();
        }
        for(List<Integer> list: connections){
            adj[list.get(0)].add(list.get(1));
            adj[list.get(1)].add(list.get(0));
        }
        boolean[] visited = new boolean[n];
        int[] dist = new int[n]; 
        
        List<List<Integer>> ans = new ArrayList<>();
        dfsHelp(adj,visited,dist,0,-1,ans);
        
        return ans;
    }
}
