class Solution {
    public void combinationSumUtil(int[] candidates, int target, int ind, List<List<Integer>> ans, List<Integer> ds){
        if(ind==candidates.length){
            if(target==0){
                ans.add(new ArrayList<>(ds));   
            }
            return;
        }
        if(candidates[ind]<=target){
            
            ds.add(candidates[ind]);
            combinationSumUtil(candidates, target-candidates[ind], ind, ans, ds);
            ds.remove(ds.size()-1);                        
        }
        combinationSumUtil(candidates,target,ind+1, ans, ds);
        
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        combinationSumUtil(candidates,target,0, ans, ds); 
        return ans;
        
    }
}
