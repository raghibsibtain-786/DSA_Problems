class Solution {
    
    private boolean checkPred(String s1, String s2){
        
        if(s1.length()!=s2.length()+1)
            return false;
        
        int i = 0;
        int j = 0;
        while(i<s1.length()){
            if(j<s2.length() && s1.charAt(i)==s2.charAt(j)){
                i++; j++;
            }
            else{
                i++;
            }
        }
        if(i==s1.length() && j==s2.length())
            return true;
        
        return false;
    }
    
    public int longestStrChain(String[] words) {
        int maxLen = 1;
        int[] dp = new int[words.length];
        Arrays.fill(dp,1);
        
        Arrays.sort(words,new Comparator<String>(){
            @Override public int compare(String s1, String s2){
                return s1.length()-s2.length();
            }
        });
        
        for(int i = 0; i<words.length; i++){
            for(int j = 0; j<i; j++){
                if(1+dp[j]>dp[i] && checkPred(words[i],words[j])){
                    dp[i] = 1 + dp[j];
                }
            }
            if(dp[i]>maxLen)
                maxLen = dp[i];
        }
        
        return maxLen;
    }
}
