class meeting{
    int start;
    int end;
    int pos;
    meeting(int start, int end, int pos){
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class meetingComparator implements Comparator<meeting>{
    
    @Override public int compare(meeting m1, meeting m2){
        if(m1.end>m2.end){
            return 1;
        }
        else if(m1.end<m2.end){
            return -1;
        }
        else if(m1.pos>m2.pos){
            return 1;
        }
        return -1;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        int ans = 0;
        PriorityQueue<meeting> pq = new PriorityQueue<>(new meetingComparator());
        for(int i = 0; i<n; i++){
            pq.add(new meeting(start[i],end[i],i));
        }
        int prevLimit = pq.peek().end;
        ans++;
        pq.poll();
        while(!pq.isEmpty()){
            int begin = pq.peek().start;
            if(begin>prevLimit){
                prevLimit = pq.peek().end;
                ans++;
            }
            pq.poll();
        }
        return ans;
    }
}
