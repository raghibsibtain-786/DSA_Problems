/*class Solution { //TLE-> recursion
    int[] startArr;
    private int binSearch(int[] arr, int end){
        int low = 0, high = arr.length-1;

        while(low<=high){
            int mid = (low+high)/2;
            if(arr[mid]==end){
                return mid;
            }
            
            if(arr[mid]<end){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return low;
    }
    private int solveUtil(int[][] jobs, int i) 
    {

        if(i>=jobs.length){
            return 0;
        }

        int newi = binSearch(startArr, jobs[i][1]);

        return Math.max(jobs[i][2]+solveUtil(jobs,newi) , solveUtil(jobs,i+1));
    }
    
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit)
    {
        int n = startTime.length;
        int[][] jobs = new int[n][3];
        for(int i = 0; i<n; i++) {
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }
        Arrays.sort(jobs,((a,b)->a[0]-b[0]));
        startArr = new int[n];
        for(int i = 0; i<n; i++){
            startArr[i] = jobs[i][0];
        }
        int ans = solveUtil(jobs,0);
        return ans;
    }
}*/
