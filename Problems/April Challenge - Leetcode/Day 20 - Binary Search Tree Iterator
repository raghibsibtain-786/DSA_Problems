/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator { //my own approach
    TreeNode iter = new TreeNode(Integer.MIN_VALUE);
    LinkedList<Integer> list = new LinkedList<>();
    int pointer;
    
    public void inorder(TreeNode root, LinkedList<Integer> list){
        if(root==null)
            return;
        
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
    
    public BSTIterator(TreeNode root) {
        inorder(root,list);
        pointer = -1;                        
    }
    
    public int next() {
        pointer++;
        if(pointer<list.size()){
            return list.get(pointer);
        }
        else{
            return -1;
        }
    }
    
    public boolean hasNext() {
        if(pointer+1<list.size()){
            return true;
        }        
        return false;
    }
}
