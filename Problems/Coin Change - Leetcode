class Solution { TC >>>> O(2^n) n->length of coin array, SC-> O(target)//////////// with dp TC is O(length*target), SC->o(target) + o(target*length)
    int[][] dp;
    public int help(int[] coins, int amount, int index){
        if(index==0){
            if(amount%coins[index]==0){
                return amount/coins[index];
            }
            else{
                return 1000000000;
            }
        }
        if(dp[index][amount]!=-1)
            return dp[index][amount];
        
        int notTake = help(coins,amount,index-1);
        int take = 1000000000;
        if(coins[index]<=amount){
            take = 1 + help(coins,amount-coins[index],index);
        }
        
        return dp[index][amount] = Math.min(notTake,take);
    }
    public int coinChange(int[] coins, int amount) {
        dp = new int[coins.length][amount+1];
        Arrays.stream(dp).forEach(a -> Arrays.fill(a,-1));
        int index = coins.length - 1;
        int ans = help(coins,amount,index);
        return (ans>=1000000000) ? -1 : ans;
    }
}


 public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount+1];
        for(int t = 0; t<=amount; t++){ //check for index 0
            if(t%coins[0]==0)
                dp[0][t] = t/coins[0];
            else
                dp[0][t] = 1000000000;
        }
        for(int i = 1; i<n; i++){
            for(int t = 0; t<=amount; t++){
                
                int notTake = dp[i-1][t];
                int take = 1000000000;
                
                if(coins[i]<=t)
                    take = 1 + dp[i][t-coins[i]];
                
                dp[i][t] = Math.min(take,notTake);
            }
        }
        int ans = dp[n-1][amount];
        return ans>=1000000000 ? -1 : ans ;
    }
}
