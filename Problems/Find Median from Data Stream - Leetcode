class MedianFinder {
    PriorityQueue<Double> minHeap;
    PriorityQueue<Double> maxHeap;
    public MedianFinder() {
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
    }
    
    public void addNum(int num) {
        Double dnum = Double.valueOf(num);
        if(maxHeap.isEmpty() || maxHeap.peek()>num){
            maxHeap.add(dnum);
        }
        else{
            minHeap.add(dnum);
        }
        
        if(minHeap.size()>maxHeap.size()+1){
            maxHeap.add(minHeap.peek());
            minHeap.poll();
        }
        else if(maxHeap.size()>minHeap.size()+1){
            minHeap.add(maxHeap.peek());
            maxHeap.poll();
        }
    }
    
    public double findMedian(){
        if(maxHeap.size()==minHeap.size()){
           return ((maxHeap.peek()+minHeap.peek()) / Double.valueOf(2));
        }
        else{
           return (maxHeap.size()>minHeap.size() ? maxHeap.peek() : minHeap.peek()); 
        }
    }
}
