class Solution { //TC-> O(N)
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> mp = new HashMap<>();
        int left = 0;
        int right = 0;
        int len = 0;
        while(right<s.length()){
            char c = s.charAt(right);
            if(mp.containsKey(c)){
                left = Math.max(left, (mp.get(c)+1));
            }
            
            mp.put(c,right);
            len = Math.max(len, (right-left+1));
            right++;
        }
        return len;        
    }
}

/* //TC -> O(2N)
import java.util.*;

public class LongestSubArrayWithoutRepeatingChar {
    private static int longestSubstring(String s){
        Set<Character> set = new HashSet<>();
        int left = 0;
        int right = 0;
        int len = 0;
        int n = s.length();
        while(right < n){
            char c = s.charAt(right);
            if(set.contains(c)){
                while(set.contains(c)){
                    set.remove(s.charAt(left));
                    left++;
                }
            }
            else{
                set.add(c);
                len = Math.max(len,(right-left+1));
                right++;

            }
        }
        return len;
    }
    public static void main(String[] args) {
        String s = "abcaabcdba";
        System.out.println(longestSubstring(s));
    }
}
*/
