/*My solution*/

class Solution {
    public int orangesRotting(int[][] grid) {
        
        if(grid.length==0 || grid==null)
        {
            return -1;
        }   
        
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        
        Queue<int[]> q = new LinkedList<>();
        
        for(int i = 0; i<m;i++){
            for(int j = 0; j<n; j++){
                
                if(grid[i][j]==2)
                    q.add(new int[]{i,j});
                
                if(grid[i][j]!=0) //count all oranges whether rotten or fresh
                    count++;
                
            }
        }
        
        int orangeInQ = 0;
        int mins = 0;
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        while(!q.isEmpty()){
            
            int s = q.size();
            orangeInQ += s;
            while(s!=0){
                
                int x = q.peek()[0];
                int y = q.peek()[1];
                q.poll();
                
                for(int i = 0; i<4; i++)
                {
                    int newx = x+dx[i];
                    int newy = y+dy[i];
                    if(newx<m && newx>=0 && newy<n && newy>=0 && grid[newx][newy]==1)
                    {
                        q.add(new int[]{newx,newy});
                        grid[newx][newy] = 2;
                    }
                }
                s--;
            }
            if(q.size()!=0) mins++;
        }
        
        return count==orangeInQ?mins:-1;
    }
}


package com.shibu;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class NodeOranges{
    int x, y, time;
    NodeOranges(int x, int y, int time){
        this.x = x;
        this.y = y;
        this.time = time;
    }
}
public class RottenOranges {
    static int rottenOranges(int[][] arr){
        int row = arr.length;
        int col = arr[0].length;
        int count = 0;
        int ans = Integer.MIN_VALUE;
        Queue<NodeOranges> q = new LinkedList<>();
        for(int i = 0; i<row; i++) {
            for (int j = 0; j < col; j++) {
                if (arr[i][j] == 2) {
                    q.add(new NodeOranges(i, j, 0));
                }
                if (arr[i][j] != 0) {
                    count++;
                }
            }
        }
        int countRotten = 0;
        while(!q.isEmpty()){
            NodeOranges node = q.peek();
            q.poll();
            countRotten++;
            int nodetime = node.time;
            ans = Math.max(ans,nodetime);
            int[] dx = {-1,0,1,0};
            int[] dy = {0,-1,0,1};
            for(int i = 0; i<4; i++){
                int newX = node.x + dx[i];
                int newY = node.y + dy[i];
                if(newX>=0 && newX<row && newY<col && newY>=0 && arr[newX][newY]==1){
                    arr[newX][newY]=2;
                    q.add(new NodeOranges(newX,newY,nodetime+1));
                }
            }
        }
        if(count==countRotten){
            return ans;
        }
        return -1;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int row = sc.nextInt();
        int col = sc.nextInt();
        int[][] oran = new int[row][col];
        for(int i = 0; i<row; i++){
            for(int j=0; j<col;j++){
                oran[i][j] = sc.nextInt();
            }
        }
        System.out.println(rottenOranges(oran));
    }
}
//The worst case time complexity is O(n*m) or O(n*m-emptycells)
