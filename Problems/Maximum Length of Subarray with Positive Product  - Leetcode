/*class Solution {
    final int mod = 1000000009;
    public int getMaxLen(int[] nums) {
        
        long prod = 1;
        
        int maxLen = 0;
        int start = 0;
        int end = 0;
        
        while(end<nums.length){
            
            prod *= nums[end];
            if(prod>0){
                maxLen = Math.max(maxLen,(end-start+1));
            }
            else if(prod==0){
                prod = 1;
                start = end+1;
            }
            prod %= mod;
            end++;
        }
        
        start = nums.length-1;
        end = nums.length-1;
        prod = 1;
        
        while(end>=0){
            prod *= nums[end];
            if(prod>0){
                maxLen = Math.max(maxLen,(start-end+1));
                
            }
            else if(prod==0){
                prod = 1;
                start = end-1;
            }
            prod %= mod;
            end--;
        }        
        return maxLen;
    }
}*/

class Solution{
    public int getMaxLen(int[] nums) {
        
        int ans = Integer.MIN_VALUE;
        int n = nums.length;
        
        for(int i = 0; i<n;)
        {
            int start = i;
            int countNeg = 0;
            int startNeg = -1;
            int endNeg = -1;
        
            while(start<n && nums[start]==0)
                start++;
            
            int end = start;
            while(end<nums.length && nums[end]!=0){
                if(nums[end]<0){
                    
                    countNeg++;
                    
                    if(startNeg==-1)
                        startNeg = end;
                    
                    endNeg = end;
                }
                end++;
            }
            if(countNeg%2==0){
                ans = Math.max(ans,end-start);
            }
            else{
                if(startNeg!=-1) ans = Math.max(ans,end-startNeg-1);
                if(endNeg!=-1) ans = Math.max(ans,endNeg-start); 
                //we are not going to take the number at endNeg
                //in case of odd number of countNeg
                //same for startNeg
            }
            i = end+1;
        }
        return ans;        
    }
}
