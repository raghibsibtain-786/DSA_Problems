class Solution {
    public void partitionUtil(String s, int index, List<String> ds, List<List<String>> ans){
        
        if(index==s.length()){
            ans.add(new ArrayList<>(ds));
            return;
        }
        
        for(int i = index; i<s.length(); i++){
            if(isPalindrome(s,index,i)){
                ds.add(s.substring(index,i+1));
                partitionUtil(s,i+1,ds,ans);
                ds.remove(ds.size()-1);
            }
        }
    }
    
    public boolean isPalindrome(String s , int start, int end){
        while(start<=end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
    
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        ArrayList<String> ds = new ArrayList<>();
        partitionUtil(s,0,ds,ans);
        return ans;
    }
}
