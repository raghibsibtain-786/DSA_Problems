class Solution {
    public int solve(int[][] arr, int[][] dp)
    {
        int min = 100000;
        for(int col=0; col<arr[0].length; col++)
        {
            dp[0][col] = arr[0][col];
        }
        for(int row = 1; row<arr.length; row++)
        {
            for(int col = 0; col<arr[0].length; col++)
            {
                int up = dp[row-1][col];
                int ld = (col-1>=0) ? dp[row-1][col-1] : 100000;
                int rd = (col+1<arr[0].length) ? dp[row-1][col+1] : 100000;
                dp[row][col] = arr[row][col] + Math.min(up,Math.min(ld,rd));
            }
        }
        for(int j = 0; j<dp[0].length; j++)
        {
            min = Math.min(min,dp[arr.length-1][j]);
        }
        return min;
    }
    
    public int minFallingPathSum(int[][] matrix) {
        int[][] dp = new int[matrix.length][matrix[0].length];
        return solve(matrix,dp);        
    }
}
