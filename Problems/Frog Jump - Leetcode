class Solution { // My solution Opitmised
    public boolean canCross(int[] stones) {
        Map<Integer, HashSet<Integer>> mp = new HashMap<Integer, HashSet<Integer>>();
        for (int i = 0; i < stones.length; i++) {
            mp.put(stones[i], new HashSet<Integer>());
        }
        
        mp.get(stones[0]).add(1);
        
        for (int i = 0; i < stones.length; i++) {
            HashSet<Integer> lastJumps = mp.get(stones[i]);
            for (Integer jump : lastJumps) {
                int target = stones[i] + jump;
                if (target == stones[stones.length-1]) {
                    return true;
                }
                if (mp.containsKey(target)) {
                    if (jump - 1 > 0) {
                        mp.get(target).add(jump-1);
                    }
                    mp.get(target).add(jump);
                    mp.get(target).add(jump+1);
                }
            }
        }
        
        return false;
        }    
}


/*public boolean canCross(int[] stones){ //My solution TLE
         if(stones[1]!=1)
             return false;
         
         Map<Integer,Integer> mp = new HashMap<>();
         for(int i = 0; i<stones.length; i++)
         {
             mp.put(stones[i],i);
         }
         Queue<int[]> q = new LinkedList<>();
         
         q.add(new int[]{stones[1],1});
         int target = stones[stones.length-1];
         
         while(!q.isEmpty())
         {
            int stone = q.peek()[0];
            int last = q.peek()[1];
            q.poll();
            if(mp.containsKey(stone))
            {
                if(target==stone)
                    return true;
                else{
                    if(last-1>0)
                        q.add(new int[]{stone+last-1,last-1});
                    
                    q.add(new int[]{stone+last,last});
                    q.add(new int[]{stone+last+1,last+1});
                }
            }
         }
         return false;
     }*/

/*class Solution { //My solution Recursion TLE
    public Map<Integer,Boolean> dp = new HashMap<>();
    public boolean solve(int stone, int[] stones, int dest, int last, Map<Integer,Integer> mp)
    {
        if(stone>stones[dest] || last<=0){
            return false;
        }
        /*if(dp.containsKey(stone)){
            return dp.get(stone);
        }*/
        
        if(mp.containsKey(stone)){
            if(mp.get(stone)==dest){
                return true;
            }
            else{
                boolean left = solve(stone+last+1,stones, dest,last+1,mp); 
                boolean mid = solve(stone+last,  stones, dest,last,  mp);
                boolean right = solve(stone+last-1,stones, dest,last-1,mp); 
                /*dp.put(stone,(left||mid||right));*/
                return (left||mid||right);
            }
        }
        
        return false;        
    }
    public boolean canCross(int[] stones) {
        
        if(stones[1]!=1)
            return false;
        
        Map<Integer,Integer> mp = new HashMap<>();             
        for(int i = 1; i<stones.length; i++)
        {
            mp.put(stones[i],i);
        }
        int dest = stones.length-1;
        
        //Arrays.fill(dp,0,stones.length+1,false);
        
        return solve(stones[1],stones, dest,1,mp);
    }
}*/

//MY OWN SOLUTION.. NO TLE
class Solution {
        public Map<String,Boolean> dp = new HashMap<>();
        public boolean solve(int stone, int[] stones, int dest, int last, Map<Integer,Integer> mp)
        {
            if(stone>stones[dest] || last<=0){
                return false;
            }   
            String temp = stone + "*" + last;
            if(dp.containsKey(temp))
                return dp.get(temp);        
        
            if(mp.containsKey(stone)){
                if(mp.get(stone)==dest){
                    return true;
                }
                else
                {
                boolean left = solve(stone+last+1,stones, dest,last+1,mp); 
                boolean mid = solve(stone+last,  stones, dest,last,  mp);
                boolean right = solve(stone+last-1,stones, dest,last-1,mp); 
                dp.put(temp,(left||mid||right));
                return (left||mid||right);
                }
            }
            dp.put(temp,false);
            return false;        
        }
    
    public boolean canCross(int[] stones) {
        
        if(stones[1]!=1)
            return false;
        
        Map<Integer,Integer> mp = new HashMap<>();             
        for(int i = 1; i<stones.length; i++)
        {
            mp.put(stones[i],i);
        }
        int dest = stones.length-1;
        
        //Arrays.fill(dp,0,stones.length+1,false);
        
        return solve(stones[1],stones, dest,1,mp);
    }
}
