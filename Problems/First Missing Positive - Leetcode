class Solution { //S.C -> O(n) TC->O(N)
    public int firstMissingPositive(int[] nums) {
        
        Set<Integer> st = new HashSet<>();
        
        for(int i = 0; i<nums.length; i++){
            
            st.add(nums[i]);
            
        }
        
        for(int i = 1; i<=(nums.length+1); i++){
            
            if(!st.contains(i)){
                return i;
            }
        }
        return 1;
                
    }
}

class Solution { // SC -> O(1) TC->O(N)
    public int firstMissingPositive(int[] nums) {
        
        boolean one = true;
        for(int i = 0; i<nums.length; i++){
            if(nums[i]==1){
                one = true;
                break;
            }
            else{
                one = false;        
            }
        }        
        if(!one) return 1;   
        
        if(nums.length==1) return 2;
        
        int n = nums.length;        
        for(int i = 0; i<n; i++){
            if(nums[i]<=0 || nums[i]>n){
                nums[i] = 1;
            }
        }
        
        for(int i = 0; i<n; i++){
            int x = Math.abs(nums[i]); 
            if(nums[x-1] > 0){
                nums[x-1] *= -1;
            }
        }
        
        for(int i = 0; i<n; i++){
            if(nums[i]>0){
                return i+1;
            }
        }
        
        return n+1;
    }
}
