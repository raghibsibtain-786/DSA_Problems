class Solution { //memoization.. TC-> O(NxM), SC->O(NxM) + O(N)
    int[][] dp;
    public int help(int index, int prev_ind, int[] nums){
        if(index==nums.length){
            return 0;
        }
        if(dp[index][prev_ind+1]!=-1){
            return dp[index][prev_ind+1];
        }
        int notTake = 0 + help(index+1,prev_ind,nums);
        int take = Integer.MIN_VALUE;
        
        if(prev_ind==-1 || nums[index]>nums[prev_ind]){
            take = 1 + help(index+1,index,nums);
        }
        
        return dp[index][prev_ind+1] = Math.max(take,notTake);
    }
    public int lengthOfLIS(int[] nums) {
        dp = new int[nums.length][nums.length+1];
        
        for(int i = 0; i<dp.length; i++){
            for(int j = 0; j<dp[0].length; j++){
                dp[i][j] = -1;
            }
        }
        return help(0,-1,nums);       
    }
}


class Solution { Tabulation... TC->O(NxM), SC->O(NxM)
    //int[][] dp;
    /*public int help(int index, int prev_ind, int[] nums){
        if(index==nums.length){
            return 0;
        }
        if(dp[index][prev_ind+1]!=-1){
            return dp[index][prev_ind+1];
        }
        int notTake = 0 + help(index+1,prev_ind,nums);
        int take = Integer.MIN_VALUE;
        
        if(prev_ind==-1 || nums[index]>nums[prev_ind]){
            take = 1 + help(index+1,index,nums);
        }
        
        return dp[index][prev_ind+1] = Math.max(take,notTake);
    }*/
    public int lengthOfLIS(int[] nums) {
        
        int n = nums.length;
        int[][] dp = new int[n+1][n+1];
        
        /*for(int i = 0; i<=n+1; i++){
            dp[n][i] = 0;    //base case    
        }*/
        
        for(int index = n-1; index>=0; index--){
            for(int prev_ind = index-1; prev_ind>=-1; prev_ind--){
                
                int notTake = 0 + dp[index+1][prev_ind+1];
                int take = Integer.MIN_VALUE;
                if(prev_ind==-1 || nums[index]>nums[prev_ind]){
                    take = 1 + dp[index+1][index+1];
                }

                dp[index][prev_ind+1] = Math.max(take,notTake); 
            }            
        }
        return dp[0][0];
    }
}
