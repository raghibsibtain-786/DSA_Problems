class Solution { //TC-> O(mn) SC-> O(mn)
    
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i = 0; i<m; i++)
        {
            for(int j = 0; j<n; j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j] = 1;
                }
                else
                {
                    int up = (i-1)<0 ? 0 : dp[i-1][j];
                    int down = (j-1)<0 ? 0 : dp[i][j-1];
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
}

class Solution { //SC -> O(N)
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        //int[][] dp = new int[m][n];
        
        int[] prev = new int[m];
        
        for(int i = 0; i<m; i++)
        {
            int[] temp = new int[n];
            for(int j = 0; j<n; j++)
            {
                if(i>=0 && j>=0 && obstacleGrid[i][j]==1)
                {
                    temp[j] = 0;
                }
                else if(i==0 && j==0)
                {
                    temp[j] = 1;
                }
                else{
                    int up = (i-1)<0 ? 0: prev[j];
                    int left = (j-1)<0 ? 0: temp[j-1];
                    temp[j] = up + left;
                }
            }
            prev = temp;
        }
        return prev[n-1];
    }
}

