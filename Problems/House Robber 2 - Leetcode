// class Solution { TLE
//     public int first(int[] nums, int index){
//         if(index<0){
//             return 0;
//         }
        
//         int take = nums[index]+first(nums,index-2);
//         int notTake = first(nums,index-1);
        
//         return Math.max(take,notTake);
//     }
//     public int second(int[] nums, int index){
//         if(index<1){
//             return 0;
//         }
//         int take = nums[index] + second(nums,index-2);
//         int notTake = second(nums,index-1);
        
//         return Math.max(take,notTake);
//     }
    
//     public int rob(int[] nums) {
//         int n = nums.length;
        
//         if(n==1)
//             return nums[0];
        
//         return Math.max(first(nums,n-2),second(nums,n-1));       
//     }
// }

class Solution{
    public int maxSum(int[] nums){
        int prev = nums[0];
        int prev2 = 0;
        for(int i = 1; i<nums.length; i++) {
            
            int take = nums[i];
            if(i>1) take += prev2;
            
            int notTake = prev;
            
            int curr = Math.max(take,notTake);
            
            prev2 = prev;
            prev = curr;
        }
        
        return prev;    
    }
    
    public int rob(int[] nums){
        
        if(nums.length==1)
            return nums[0];
        
        int[] temp1 = new int[nums.length-1];
        int[] temp2 = new int[nums.length-1];  
        
        for(int i = 0; i<nums.length-1; i++){
            temp1[i] = nums[i];
        }
        
        for(int i = 1; i<nums.length; i++){
            temp2[i-1] = nums[i];
        }
        
        return Math.max(maxSum(temp1),maxSum(temp2));
    }
}
